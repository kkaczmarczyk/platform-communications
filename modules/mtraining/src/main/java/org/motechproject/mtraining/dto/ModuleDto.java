package org.motechproject.mtraining.dto;

import java.util.List;
import java.util.UUID;

/**
 * Contract Object representing a Module.
 * Module
 *   + chapters : List of Chapters
 *   + name    : Module name
 *   + description : Module description
 *   + contentId   : UUID that for a module (different from the _id generated by couch)
 *   + version     : module version (a module can have multiple versions, different versions of the module will have same contentId)
 *   + externalContentId  : Id that points to an external file or resource that is associated with the course.For eg. an audio file that is played to the enrollee when the module is started
 *   + createdBy    : Author of the module
 *   + createdOn    : Date on which module was created
 */
public class ModuleDto extends ContentDto {
    private String name;
    private String description;
    private List<ChapterDto> chapters;

    public ModuleDto() {
    }

    public ModuleDto(boolean isActive, String name, String description, String externalId, String createdBy, List<ChapterDto> chapters) {
        super(isActive, externalId, createdBy);
        this.name = name;
        this.description = description;
        this.chapters = chapters;
    }


    public ModuleDto(UUID contentId, Integer version, boolean isActive, String name, String description, String externalId, String createdBy, List<ChapterDto> chapters) {
        super(contentId, version, isActive, externalId, createdBy);
        this.name = name;
        this.description = description;
        this.chapters = chapters;
    }

    public String getName() {
        return name;
    }

    public String getDescription() {
        return description;
    }

    public List<ChapterDto> getChapters() {
        return chapters;
    }

    public ChapterDto findFirstActiveChapter() {
        return findFirstActive(chapters);
    }

    public ChapterDto getChapter(UUID chapterId) {
        return findWithContentId(chapterId, chapters);
    }

    public ChapterDto getNextActiveChapterAfter(UUID chapterId) {
        int position = findPosition(chapterId, chapters);
        if (position == -1 || position + 1 == chapters.size()) {
            return null;
        }
        return findFirstActive(chapters.subList(position + 1, chapters.size()));
    }

    public ChapterDto lastActiveChapter() {
        return findLastActive(chapters);
    }
}
