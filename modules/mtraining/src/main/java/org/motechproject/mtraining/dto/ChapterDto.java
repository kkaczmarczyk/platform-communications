package org.motechproject.mtraining.dto;

import java.util.List;
import java.util.UUID;

/**
 * Contract object representing a Chapter.
 * Chapter
 *   + name    : Chapter name
 *   + messages : List of messages
 *   + quiz      : quiz for the chapter
 *   + description : Chapter description
 *   + contentId   : UUID that for a chapter (different from the _id generated by couch)
 *   + version     : chapter version (a chapter can have multiple versions, different versions of the chapter will have same contentId)
 *   + externalContentId  : Id that points to an external file or resource that is associated with the chapter.For eg. an audio file that is played to the enrollee when the chapter is started
 *   + createdBy    : Author of the chapter
 *   + createdOn    : Date on which chapter was created
 */
public class ChapterDto extends ContentDto {
    private String name;
    private String description;
    private List<MessageDto> messages;
    private QuizDto quiz;

    public ChapterDto() {
    }

    public ChapterDto(boolean isActive, String name, String description, String externalId, String createdBy, List<MessageDto> messages, QuizDto quiz) {
        super(isActive, externalId, createdBy);
        this.name = name;
        this.description = description;
        this.messages = messages;
        this.quiz = quiz;
    }

    public ChapterDto(UUID contentId, Integer version, boolean isActive, String name, String description, String externalId, String createdBy, List<MessageDto> messages, QuizDto quiz) {
        super(contentId, version, isActive, externalId, createdBy);
        this.name = name;
        this.description = description;
        this.messages = messages;
        this.quiz = quiz;
    }

    public String getName() {
        return name;
    }

    public String getDescription() {
        return description;
    }

    public List<MessageDto> getMessages() {
        return messages;
    }

    public QuizDto getQuiz() {
        return quiz;
    }

    public MessageDto findFirstActiveMessage() {
        return findFirstActive(messages);
    }

    public MessageDto getMessage(UUID messageId) {
        return findWithContentId(messageId, messages);
    }

    public MessageDto getNextActiveMessageAfter(UUID messageId) {
        int position = findPosition(messageId, messages);
        if (position == -1 || position + 1 == messages.size()) {
            return null;
        }
        return findFirstActive(messages.subList(position + 1, messages.size()));
    }

    public MessageDto lastActiveMessage() {
        if (messages == null) {
            return null;
        }

        return findLastActive(messages);
    }

    public boolean hasActiveQuiz() {
        return quiz != null && quiz.isActive();
    }
}
