package org.motechproject.mtraining.domain;

import org.apache.commons.collections.Predicate;
import org.codehaus.jackson.annotate.JsonIgnore;
import org.codehaus.jackson.annotate.JsonProperty;
import org.joda.time.DateTime;
import org.motechproject.commons.couchdb.model.MotechBaseDataObject;
import org.motechproject.mtraining.util.ISODateTimeUtil;

import java.util.List;
import java.util.UUID;

import static org.apache.commons.collections.CollectionUtils.find;


/**
 * Base class to be inherited by all content domain objects of the course structure.
 * It defines the necessary fields that each object in a course structure should contain.
 * *  + contentId   : UUID for a content (different from the _id generated by couch)
 *   + version     : content version (a chapter can have multiple versions, different versions of the content will have same contentId)
 *   + externalContentId  : Id that points to an external file or resource that is associated with the content.For eg. an audio file that is played to the enrollee when the content is started
 *   + createdBy    : Author of the content
 *   + createdOn    : Date on which content was created
 *   + isActive     : Whether the content is active or not.As of now deletion is soft delete meaning the content is inactivated.
 */
public abstract class Content extends MotechBaseDataObject {
    private static final int DEFAULT_VERSION = 1;

    @JsonProperty
    private UUID contentId;

    @JsonProperty
    private Integer version;


    @JsonProperty
    private boolean isActive;

    @JsonProperty
    private String externalContentId;

    @JsonProperty
    private String createdBy;

    @JsonProperty
    private DateTime createdOn;

    protected Content() {
        this.contentId = UUID.randomUUID();
        this.version = DEFAULT_VERSION;
        this.createdOn = ISODateTimeUtil.nowInTimeZoneUTC();
    }

    protected Content(boolean isActive, String externalContentId, String createdBy) {
        this();
        this.isActive = isActive;
        this.createdBy = createdBy;
        this.externalContentId = externalContentId;
    }

    protected Content(UUID contentId, Integer version, boolean isActive, String externalContentId, String createdBy) {
        this.contentId = contentId;
        this.version = version;
        this.isActive = isActive;
        this.createdBy = createdBy;
        this.externalContentId = externalContentId;
        this.createdOn = ISODateTimeUtil.nowInTimeZoneUTC();
    }

    public UUID getContentId() {
        return contentId;
    }

    public void setContentId(UUID contentId) {
        this.contentId = contentId;
    }

    public Integer getVersion() {
        return version;
    }

    public void incrementVersion() {
        version = version + 1;
    }

    @JsonIgnore
    public boolean isActive() {
        return isActive;
    }

    public String getCreatedBy() {
        return createdBy;
    }

    public String getExternalContentId() {
        return externalContentId;
    }

    public DateTime getCreatedOn() {
        return createdOn;
    }

    public static <T extends Content> Object findContentByContentId(List<T> contents, final UUID contentId) {
        return find(contents, new Predicate() {
            @Override
            public boolean evaluate(Object o) {
                T question = (T) o;
                return contentId.equals(question.getContentId());
            }
        });
    }
}
