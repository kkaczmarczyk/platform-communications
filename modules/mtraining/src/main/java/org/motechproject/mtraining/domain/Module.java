package org.motechproject.mtraining.domain;

import org.codehaus.jackson.annotate.JsonProperty;
import org.ektorp.support.TypeDiscriminator;

import java.util.List;
import java.util.UUID;

/**
 * Couch document object representing a Module.
 * Course is the root level node in the course content hierarchy.
 * Module
 *   + chapters : List of Chapters
 *   + name    : Module name
 *   + description : Module description
 *   + externalContentId   : UUID that for a module (different from the _id generated by couch)
 *   + version     : module version (a module can have multiple versions, different versions of the module will have same contentId)
 *   + referenceId  : Id that points to an external file or resource that is associated with the course.For eg. an audio file that is played to the enrollee when the module is started
 *   + createdBy    : Author of the module
 *   + createdOn    : Date on which module was created
 */
@TypeDiscriminator("doc.type === 'Module'")
public class Module extends Content {

    @JsonProperty
    private String name;

    @JsonProperty
    private String description;

    @JsonProperty
    private List<Chapter> chapters;

    Module() {
    }

    public Module(boolean isActive, String name, String description, String externalId, String createdBy, List<Chapter> chapters) {
        super(isActive, externalId, createdBy);
        this.name = name;
        this.description = description;
        this.chapters = chapters;
    }

    public Module(UUID contentId, Integer version, boolean isActive, String name, String description, String externalId, String createdBy, List<Chapter> chapters) {
        super(contentId, version, isActive, externalId, createdBy);
        this.name = name;
        this.description = description;
        this.chapters = chapters;
    }

    public List<Chapter> getChapters() {
        return chapters;
    }

    public String getName() {
        return name;
    }

    public String getDescription() {
        return description;
    }
}
