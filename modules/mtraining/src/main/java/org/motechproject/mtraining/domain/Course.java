package org.motechproject.mtraining.domain;

import org.codehaus.jackson.annotate.JsonIgnore;
import org.codehaus.jackson.annotate.JsonProperty;
import org.ektorp.support.TypeDiscriminator;

import java.util.List;
import java.util.UUID;

/**
 * Couch document object representing a Course.
 * Course is the root level node in the course content hierarchy.
 * Course
 *   + modules : List of Modules
 *   + name    : course name (eg. CS 001)
 *   + description : Course description (eg. Computer Science Fundamentals for 1st year students)
 *   + contentId   : UUID that for a course (different from the _id generated by couch)
 *   + version     : course version (a course can have multiple versions, different versions of the course will have same contentId)
 *   + externalContentId  : Id that points to an external file or resource that is associated with the course.For eg. an audio file that is played to the enrollee when the course is started
 *   + createdBy    : Author of the course
 *   + createdOn    : Date on which course was created
 *   + isPublished  : whether the course is ready.Different from being active.For eg. a course content may need to be sent to an IVR system before students can start getting enrolled to it.
 *                    This implies that when a student requests a bookmark for a very first time,then only a published course needs to be considered.
 */

@TypeDiscriminator("doc.type === 'Course'")
public class Course extends Content {

    @JsonProperty
    private String name;

    @JsonProperty
    private String description;

    @JsonProperty
    private List<Module> modules;

    @JsonProperty
    private boolean isPublished;

    Course() {
    }

    public Course(boolean isActive, String name, String description, String externalId, String createdBy, List<Module> modules) {
        super(isActive, externalId, createdBy);
        this.name = name;
        this.description = description;
        this.modules = modules;
    }

    public Course(UUID contentId, Integer version, boolean isActive, String name, String description, String externalId, String createdBy, List<Module> modules) {
        super(contentId, version, isActive, externalId, createdBy);
        this.name = name;
        this.description = description;
        this.modules = modules;
    }

    public List<Module> getModules() {
        return modules;
    }

    public String getName() {
        return name;
    }

    public String getDescription() {
        return description;
    }

    @JsonIgnore
    public boolean isPublished() {
        return isPublished;
    }

    public void publish() {
        this.isPublished = true;
    }
}
